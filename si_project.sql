use si_project;

ALTER TABLE questions_answers DROP FOREIGN KEY FK_qa_question;
ALTER TABLE questions_answers DROP FOREIGN KEY FK_qa_answer;
DROP INDEX FK_qa_question ON questions_answers;
DROP INDEX FK_qa_answer ON questions_answers;

--
-- Table structure for table `answers`
--
DROP TABLE IF EXISTS `answers`;
CREATE TABLE `answers` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `answer` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `answers`
--
INSERT INTO `answers` (`id`, `answer`) VALUES
  (1, 'display_errors'), (2, 'errors_display'), (3, 'display_error'), (4, 'error_display'), (5, 'error_reporting'),
  (6, 'errors_reporting'), (7, 'display_errors'), (8, 'short_open_tags'), (9, 'error_reporting'),
  (10, 'errors_reporting'), (11, 'display_errors'), (12, 'short_open_tags'), (13, 'php.conf'), (14, 'httpd.ini'),
  (15, 'httpd.conf'), (16, 'php.ini'), (17, 'php.conf'), (18, 'httpd.ini'), (19, 'httpd.conf'), (20, 'php.ini'),
  (21, '<?php echo “Hello World!” ?>'), (22, '<? echo “Hello World!” ?>'), (23, '<? echo “Hello World!” php?>'),
  (24, '<?= “Hello World!” ?>'), (25, 'print, echo, prompt, var_dump, var_export, var_display'),
  (26, 'print, print_r, prompt, var_dump, var_display'), (27, 'echo, print'),
  (28, 'var_export, var_dump, sprintf, printf, print_r'), (29, '$user = User()'), (30, '$_user = User()'),
  (31, '$1user_ = User()'), (32, '$_1user = User()'), (33, 'const'), (34, 'define()'), (35, 'constant()'),
  (36, 'define_const()'), (37, 'E_PARSE, E_ERROR, E_WARNING, E_NOTICE, E_ALL'),
  (38, 'E_ERRORS, E_WARNING, E_NOTICE, E_FATAL_ERROR, E_ALL'),
  (39, 'E_WARNING, E_FATAL_ERROR, E_ERROR, E_NOTICE, E_ALL'),
  (40, 'E_ERRORS, E_FATAL_ERROR, E_ERROR, E_NOTICE, E_ALL'),
  (41, 'integer, float, boolean, string, array, object, resource, null'),
  (42, 'boolean, double, string, array, integer, object, resource, null'),
  (43, 'string, array, float, null, boolean, object, resource, numeric'),
  (44, 'string, array, object, var, mixed, boolean, closure, resource'), (45, 'settype'), (46, 'gettype'),
  (47, 'isset'), (48, 'unset'), (49, 'isset'), (50, 'unset'), (51, 'empty'), (52, 'settype'), (53, 'isset'),
  (54, 'unset'), (55, 'remove'), (56, 'empty'), (57, 'isset'), (58, 'unset'), (59, 'empty'), (60, 'is_empty'),
  (61, '$arr[] = (1, 2, 3, 4, 5);'), (62, '$arr = array[1, 2, 3, 4, 5];'), (63, '$arr = [1, 2, 3, 4, 5];'),
  (64, '$arr = array(\"1\" \"2\" \"3\" \"4\" \"5\");'), (65, 'count'), (66, 'calc'), (67, 'total'), (68, 'var_dump'),
  (69, 'current'), (70, 'key'), (71, 'end'), (72, 'each'), (73, 'prev'), (74, 'key'), (75, 'current'), (76, 'next'),
  (77, 'prev'), (78, 'key'), (79, 'reset'), (80, 'next'), (81, 'current'), (82, 'key'), (83, 'reset'), (84, 'next'),
  (85, 'current'), (86, 'key'), (87, 'reset'), (88, 'each'), (89, 'last'), (90, 'end'), (91, 'reset'),
  (92, 'current'), (93, '$a--'), (94, '$a++'), (95, '++$a'), (96, '++$a++'),
  (97, 'Мне нужен сахар для моего топпинг'), (98, 'Мне нужен топпинг для моего сахар'),
  (99, 'Мне нужен топпинг для моего $coffee'), (100, 'Warning: Missing argument 2 for bar()'), (101, '3'), (102, '2'),
  (103, '5'), (104, 'Warning'), (105, 'Функция, вызываемая по ссылке'),
  (106, 'Функция, содержащая внутри себя еще одну функцию'), (107, 'Функция, вызывающая саму себя'),
  (108, 'Нет такой функции'), (109, 'const'), (110, 'define'), (111, 'static'), (112, 'absctract'),
  (113, 'Переопределение типа'), (114, 'Получение типа'), (115, 'Наследование'), (116, 'Уточнение типа'),
  (117, 'func_num_args'), (118, 'func_get_args'), (119, 'func_args'), (120, 'get_num_args'), (121, 'func_get_arg'),
  (122, 'func_get_args'), (123, 'func_args'), (124, 'get_num_args'), (125, 'func_get_arg'), (126, 'func_get_args'),
  (127, 'func_args'), (128, 'get_num_args'), (129, 'function_exists'), (130, 'method_exists'), (131, 'class_exists'),
  (132, 'isset'), (133, 'explode'), (134, 'implode'), (135, 'devide'), (136, 'split'), (137, 'array_combine'),
  (138, 'array_join'), (139, 'implode'), (140, 'explode'), (141, 'ucfirst'), (142, 'ucword'), (143, 'lcfirst'),
  (144, 'chr'), (145, 'ucfirst'), (146, 'ucword'), (147, 'lcfirst'), (148, 'chr'), (149, 'strtolower'),
  (150, 'strtoupper'), (151, 'ucfirst'), (152, 'ucword'), (153, 'strtolower'), (154, 'strtoupper'), (155, 'ucfirst'),
  (156, 'ucword'), (157, 'trim'), (158, 'empty'), (159, 'ltrim'), (160, 'rtrim'), (161, 'strip_tags'), (162, 'trim'),
  (163, 'empty'), (164, 'escape'), (165, 'strip_tags'), (166, 'str_repeat'), (167, 'str_replace'),
  (168, 'str_format'), (169, 'strip_tags'), (170, 'str_repeat'), (171, 'str_replace'), (172, 'str_format'),
  (173, 'print'), (174, 'print_r'), (175, 'sprintf'), (176, 'sprint_format'), (177, 'substr'), (178, 'mb_substr'),
  (179, 'strrchr'), (180, 'strstr'), (181, 'implode'), (182, 'explode'), (183, 'list'), (184, 'chunk_split'),
  (185, 'empty'), (186, 'isset'), (187, 'unset'), (188, 'validate'), (189, 'empty'), (190, 'isset'), (191, 'unset'),
  (192, 'check'), (193, 'empty'), (194, 'isset'), (195, 'unset'), (196, 'check'), (197, 'gettype'), (198, 'settype'),
  (199, 'set'), (200, 'get'), (201, 'gettype'), (202, 'settype'), (203, 'set'), (204, 'get'), (205, 'array_pop'),
  (206, 'array_push'), (207, 'array_shift'), (208, 'array_unshift'), (209, 'array_pop'), (210, 'array_push'),
  (211, 'array_shift'), (212, 'array_unshift'), (213, 'array_pop'), (214, 'array_push'), (215, 'array_shift'),
  (216, 'array_unshift'), (217, 'array_pop'), (218, 'array_push'), (219, 'array_shift'), (220, 'array_unshift'),
  (221, 'array_shift'), (222, 'array_unshift'), (223, 'array_column'), (224, 'array_pop'), (225, 'asort'),
  (226, 'natcasesort'), (227, 'ksort'), (228, 'krsort'), (229, 'rsort'), (230, 'asort'), (231, 'krsort'),
  (232, 'arsort'), (233, 'rsort'), (234, 'krsort'), (235, 'ksort'), (236, 'sort'), (237, 'shuffle'), (238, 'rand'),
  (239, 'array_rand'), (240, 'str_shiffle'), (241, 'shuffle'), (242, 'rand'), (243, 'array_rand'),
  (244, 'str_shiffle'), (245, 'ceil'), (246, 'floor'), (247, 'round'), (248, 'rand'), (249, 'floor'), (250, 'ceil'),
  (251, 'rand'), (252, 'round'), (253, 'ceil'), (254, 'round'), (255, 'floor'), (256, 'mix'), (257, 'getdate'),
  (258, 'date'), (259, 'microtime'), (260, 'time'), (261, 'strftime'), (262, 'date'), (263, 'strtotime'),
  (264, 'strptime'), (265, 'get_defined_constants'), (266, 'const'), (267, 'get_constants'),
  (268, 'get_defined_functions'), (269, '$_GET'), (270, '$_POST'), (271, '$_COOKIE'), (272, '$_SERVER'),
  (273, 'trigger_error'), (274, 'throw'), (275, 'set_error_handler'), (276, 'set_exception_handler'),
  (277, 'debug_backtrace'), (278, 'debug_print_backtrace'), (279, 'error_log'), (280, 'error_reporting'),
  (281, 'trigger_error'), (282, 'error_reporting'), (283, 'error_log'), (284, 'throw new Exception()'),
  (285, 'Cookies - механизм хранения данных браузером удаленной машины для отслеживания или идентификации возвращающихся посетителей.'),
  (286, 'Cookies - различные способы сохранения данных на стороне сервера для дальнейшего доступа к ним.'),
  (287, 'Cookies - один из способов группировки имен дирректорий.'),
  (288, 'Cookies - упорядоченное отображение, которое устанавливает соответствие между значением и ключом'),
  (289, 'setcookie'), (290, 'getcookie'), (291, 'set_cookie'), (292, 'Нет такой функции'), (293, 'explode'),
  (294, 'to_array'), (295, 'serialize'), (296, 'unserialize'), (297, 'object'), (298, 'array'), (299, 'int'),
  (300, 'resource'), (301, 'implode'), (302, 'explode'), (303, 'serialize'), (304, 'unserialize'), (305, 'echo'),
  (306, 'print'), (307, 'header'), (308, 'footer'), (309, 'ob_start'), (310, 'ob_flush'), (311, 'ob_end_flush'),
  (312, 'ob_get_flush'),
  (313, 'Сессии - это это механизм хранения данных браузером удаленной машины для отслеживания или идентификации возвращающихся посетителей.'),
  (314, 'Сессии являются простым способом хранения информации для отдельных пользователей с уникальным идентификатором сессии'),
  (315, 'Сессии - это это встроенные переменные, которые всегда доступны во всех областях видимости.'),
  (316, 'Сессиями является ассоциативный массив данных, переданных скрипту через HTTP метод POST.'), (317, 'a+'),
  (318, 'x+'), (319, 'c+'), (320, 'w+'), (321, 'ftell'), (322, 'fwrite'), (323, 'fputs'), (324, 'file_put_contents'),
  (325, 'ftell'), (326, 'fseek'), (327, 'rewind'), (328, 'feof'), (329, 'fseek'), (330, 'rewind'), (331, 'feof'),
  (332, 'file_get_contents'), (333, 'newname'), (334, 'rename'), (335, 'copy'), (336, 'move_uploaded_file'),
  (337, 'scandir'), (338, 'glob'), (339, 'readdir'), (340, 'rewinddir'), (341, '__construct()'),
  (342, '__desctuct()'), (343, '__sleep()'), (344, '__clone()'), (345, 'public'), (346, 'protected'),
  (347, 'private'), (348, 'inherited'), (349, 'PDOException'), (350, 'ErrorException'), (351, 'Exception'),
  (352, 'DataException'), (353, 'Унаследованные'), (354, 'Абстрактные'), (355, 'Завершенные'), (356, 'Статические'),
  (357, 'static'), (358, 'self'), (359, 'оба варианта'), (360, 'ни один из вариантов'), (361, '=='), (362, '==='),
  (363, 'instanceof'), (364, 'Все варианты верные'), (365, '__get()'), (366, '__isset()'), (367, '__call()'),
  (368, '__construct()'), (369, '__isset()'), (370, '__set()'), (371, '__call()'), (372, '__construct()'),
  (373, '__isset()'), (374, '__set()'), (375, '__call()'), (376, '__callStatic()'), (377, '__isset()'),
  (378, '__set()'), (379, '__call()'), (380, '__callStatic()'), (381, '__call()'), (382, '__invoke()'),
  (383, '__wakeup()'), (384, '__sleep()'), (385, '__set_state()'), (386, '__set()'), (387, '__invoke()'),
  (388, '__sleep()'), (389, '__clone()'), (390, '__construct()'), (391, '__desctuct()'), (392, '__invoke()'),
  (393, 'механизм обеспечения повторного использования кода в языках с поддержкой единого наследования.'),
  (394, 'класс, который содержит по крайней мере один абстрактный метод, должен быть определен как абстрактный.'),
  (395, 'класс, который содержит лишь объявления методов без их реализации.'), (396, 'интерфейс.'),
  (397, 'механизм обеспечения повторного использования кода в языках с поддержкой единого наследования.'),
  (398, 'класс, который содержит по крайней мере один абстрактный метод, должен быть определен как абстрактный.'),
  (399, 'класс, который содержит лишь объявления методов без их реализации.'), (400, 'внешний вид проекта.'),
  (401, 'implements'), (402, 'instanceof'), (403, 'extends'), (404, 'validates'), (405, 'implements'),
  (406, 'extends'), (407, 'instanceof'), (408, 'validates'), (409, 'gethostbyaddr'), (410, 'gethostbyname'),
  (411, 'getservbyname'), (412, 'getservbyport'), (413, 'getservbyname'), (414, 'getservbyport'),
  (415, 'gethostbyname'), (416, 'gethostbyaddr'), (417, 'imagecreatetruecolor'), (418, 'imageCreateFromString'),
  (419, 'createimage'), (420, 'imagecolorexact'), (421, 'imagecolorallocate'), (422, 'imagecolortransparent'),
  (423, 'imagecolorexact'), (424, 'imagecolorset'), (425, 'imagettftext'), (426, 'imagettfbbox'),
  (427, 'imagewritettftext'), (428, 'imagefttext'), (429, 'exec'), (430, 'execute'), (431, 'query'), (432, 'prepare'),
  (433, 'exec'), (434, 'execute'), (435, 'query'), (436, 'prepare'), (437, 'exec'), (438, 'execute'), (439, 'query'),
  (440, 'prepare'), (441, 'bindParam'), (442, 'bindValue'), (443, 'execute'), (444, 'setAttribute'),
  (445, 'bindParam'), (446, 'bindValue'), (447, 'execute'), (448, 'setAttribute'), (449, 'bindParam'),
  (450, 'bindValue'), (451, 'execute'), (452, 'setAttribute'), (453, 'fetchAll'), (454, 'fetch'), (455, 'rowCount'),
  (456, 'execute'), (457, 'curl_setup'), (458, 'curl_init'), (459, 'curl_construct'), (460, 'curl_setopt'),
  (461, 'curl_exec'), (462, 'curl_prepare'), (463, 'curl_query'), (464, 'curl_multi_exec'), (465, 'md5'),
  (466, 'sha1'), (467, 'crypt'), (468, 'hash'), (469, 'hash_md5'), (470, '__call'), (471, '__sleep'),
  (472, '__wakeup'), (473, '__invoke'), (474, '__call'), (475, '__sleep'), (476, '__wakeup'), (477, '__invoke'),
  (478, '/** comment */'), (479, '/ comment'), (480, '<!-- comment -- >'), (481, '// comment // another comment'),
  (482, '/* comment /** with another comment **/ **/'), (483, '/* comment // with another comment **/'), (484, 'да'),
  (485, 'нет'), (486, 'да'), (487, 'нет'), (488, 'да'), (489, 'нет'), (490, 'да'), (491, 'нет'), (492, 'да'),
  (493, 'нет'), (494, 'да'), (495, 'нет'), (496, 'да'), (497, 'нет'), (498, 'да'), (499, 'нет'), (500, 'да'),
  (501, 'нет'), (502, 'да'), (503, 'нет'), (504, 'да'), (505, 'нет'), (506, 'да'), (507, 'нет'), (508, 'Да'),
  (509, 'Нет'),
  (510, 'Protected методы доступны только внутри класса, в котором они объявлены. Private доступны всем наследникам.'),
  (511, 'Protected и private методы доступны внутри и снаружи класса, в котором они оъявлены.'),
  (512, 'Protected методы доступны внутри и снаружи класса, в котором они объявлены. Private доступны только внутри этого класса.'),
  (513, 'Private и protected методы доступны только внутри класса, в котором они объявлены.'),
  (514, 'Protected методы доступны внутри класса и всем наследникам этого класса. Private методы доступны только внутри класса.'),
  (515, 'First Exception.Second Exception.Basic Exception.'),
  (516, 'Second Exception.First Exception.Basic Exception.'), (517, 'Second Exception.Basic Exception.'),
  (518, 'First Exception.Basic Exception.'), (519, 'Second Exception.First Exception.'), (520, 'B'), (521, 'A'),
  (522, 'BA'), (523, 'AB'), (524, 'Warning'), (525, 'да'), (526, 'нет'), (529, 'да'), (530, 'нет'), (533, 'да'),
  (534, 'нет'), (537, 'да'), (538, 'нет'), (541, 'да'), (542, 'нет'), (545, 'да'), (546, 'нет'),
  (547, '<?php throw new Exception(); ?>'), (548, '<?php $exception = Exception(); $exception->throwException(); ?>'),
  (549, '<?php throw Exception(); ?>'), (550, 'INSERT users VALUE (1, \\\'john doe\\\', \\\'john@doe.com\\\');'),
  (551, 'INSERT users (`id`, `username`, `email`) VALUE (1, \\\'john doe\\\', \\\'john@doe.com\\\');'),
  (552, 'INSERT INTO users (`username`, `email`) VALUE (\\\'john doe\\\', \\\'john@doe.com\\\');'),
  (553, 'Запрос успешно выполнится. Создастся таблица users'), (554, 'Запрос выдаст ошибку'), (555, 'DESCRIBE'),
  (556, 'DEFINE'), (557, 'USE'), (558, 'SHOW TABLES'), (559, 'CREATE `test`;'), (560, 'CREATE DATABASE `test`;'),
  (561, 'CREATE TABLE `test`;'), (562, 'никакая из этих команд не создает базу данных'),
  (563, 'CREATE DATABASE `test`;'), (564, 'CHOOSE DATABASE `test`;'), (565, 'USE `test`;'),
  (566, 'USE DATABASE `test`;'), (567, 'CREATE TABLE'), (568, 'DROP TABLE'), (569, 'ALTER TABLE'),
  (570, 'MODIFY TABLE'), (571, 'REMOVE DATABASE'), (572, 'DROP DATABASE'), (573, 'KILL DATABASE'),
  (574, '`Удалить базу данных!`'), (575, 'INNER JOIN'), (576, 'LEFT JOIN'), (577, 'SELECT'), (578, 'WHERE'),
  (579, 'UPDATE'), (580, 'MODIFY'), (581, 'INSERT'), (582, 'нет такой команды'), (583, 'DESCRIBE'), (584, 'SHOW'),
  (585, 'USE'), (586, 'DROP'), (587, 'INNER JOIN'), (588, 'LEFT JOIN'), (589, 'JOIN'), (590, 'WHERE'),
  (591, 'INNER JOIN'), (592, 'LEFT JOIN'), (593, 'RIGHT JOIN'), (594, 'OUTER JOIN'), (595, 'WHERE'),
  (596, 'ORDER BY'), (597, 'HAVING'), (598, 'SELECT'), (599, 'mysqli_connect'), (600, 'mysqli_select'),
  (601, 'mysqli_select_db'), (602, 'mysql_query'), (603, 'mysqli_connect'), (604, 'mysqli_desctruct'),
  (605, 'mysqli_close'), (606, 'mysqli_select_db'), (607, 'mysqli_query'), (608, 'mysqli_execute'),
  (609, 'mysqli_prepare'), (610, 'mysqli_result'), (611, 'mysqli_reqult'), (612, 'mysqli_fetch_result'),
  (613, 'mysqli_fetch_array'), (614, 'mysqli_fetch_row'), (615, 'mysql_fetch_result'), (616, 'mysql_fetch_object'),
  (617, 'mysql_fetch_row'), (618, 'нет такой функции'), (619, 'естественно!'), (620, 'конечно же нет!'), (621, 'да'),
  (622, 'нет'), (623, 'да'), (624, 'нет'),
  (625, 'Сервер устанавливает в cookie специальный идентификатор, который пользователь присылает со следующим запросом'),
  (626, 'Сервер сохраняет у себя на диске IP-адрес пользователя, по которому идентифицирует конкретного пользователя'),
  (627, 'Сервер каждый раз открывает новый файл сессии'), (628, 'На сервере'), (629, 'На машине пользователя'),
  (630, 'На сервере'), (631, 'На машине пользователя'),
  (632, 'нет. PHP автоматически открывает сессию и заполняет массив $_SESSION данными пользователя'),
  (633, 'нет, если в настройках сервера выставлена специальная директива session.auto_start в 1'),
  (634, 'да, для того чтобы правильно идентифицировать пользователя'),
  (635, 'Для обращения к публичным свойствам и методам вне класса'),
  (636, 'Для обращения к публичным и защищенным статическим свойствам и методам, а также к константам'),
  (637, 'Для обращения только к публичным статическим свойствам и методам, а также к константам'),
  (638, 'На всякий случай'), (639, 'public'), (640, 'private'), (641, 'protected'),
  (642, 'можно давать любой уровень доступа'), (643, 'Через заголовки'), (644, 'Через GET или POST параметры'),
  (645, 'С помощью функции mail'), (646, 'Авиапочтой'), (647, 'Даннные $_SESSION, $_COOKIE и $_SERVER массивов'),
  (648, 'Данные $_GET массива'), (649, 'Данные $_GET и $_POST массивов'),
  (650, 'Данные $_GET, $_POST и $_COOKIE массивов'), (651, 'Список файлов проекта на сервере'),
  (652, 'Список удаленных файлов'), (653, 'Список элементов, загруженных в текущий скрипт через метод HTTP POST'),
  (654, 'Явки, пароли, адреса пользователя');

--
-- Table structure for table `questions`
--
DROP TABLE IF EXISTS `questions`;
CREATE TABLE `questions` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `question` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `questions`
--
INSERT INTO `questions` (`id`, `question`) VALUES
  (1, 'Какая директива PHP отвечает за отображение ошибок?'), (2, 'Какая директива PHP отвечает за уровень ошибок?'),
  (3, 'Какая директива позволяет использовать сокращенную форму открывающих тегов PHP'),
  (4, 'Как называется файл, который хранит настройки PHP?'),
  (5, 'Как называется файл, который хранит базовые настройки настройки конфигурации Apache сервера?'),
  (6, 'Какие из приведенных тегов являются не применимыми в PHP'),
  (7, 'Что из приведенного является конструкциями языка PHP, которые служат для вывода данных на экран'),
  (8, 'Какой из приведенных ниже форматов объявления переменных в PHP является не правильным'),
  (9, 'С помощью какой функции объявляются константы в PHP'),
  (10, 'Какой из приведенных ниже наборов уровней ошибок является ошибочным'),
  (11, 'Какой из приведенных типов данных является правильным в PHP'),
  (12, 'Какая из функций устанавливает тип для переменной'),
  (13, 'Какая из функций устанавливает, определена ли переменная'), (14, 'Какая из функций удаляет переменную'),
  (15, 'Какая из функций определяет, является ли переменная пустой'),
  (16, 'Какой формат объявления массива является правильным в РНР'),
  (17, 'Какая функция подсчитывает количество элементов в массиве'),
  (18, 'Какая функция возвращает текущий элемент массива'), (19, 'Какая функция выбирает ключ из массива'),
  (20, 'Какая функция передвигает внутренний указатель массива на одну позицию вперёд'),
  (21, 'Какая функция устанавливает внутренний указатель массива на его первый элемент'),
  (22, 'Какая функция возвращает текущую пару ключ/значение из массива и смещает его указатель'),
  (23, 'Какая функция устанавливает внутренний указатель массива на его последний элемент'),
  (24, 'Какое выражение является пост инкрементом'),
  (25, 'Дано выражение:<br />\r\n<?php<br />\r\nfunction bar($additive = \"сахар\", $coffee) {<br />\r\n	return \"Мне нужен $additive для моего $coffee.\";<br />\r\n}<br />\r\necho bar(\"топпинг\");<br />\r\n?><br />\r\nКакой будет результат?'),
  (26, 'Что выведет следующие выражение:<br />\r\n<br />\r\n<?php<br />\r\n$a = 1;<br />\r\n++$a;<br />\r\necho $a++;<br />\r\n'),
  (27, 'Что такое рекурсивная функция'), (28, 'Каким выражением объявляются статические переменные'),
  (29, 'Что такое type-hint'), (30, 'Какая функция возвращает количество аргументов, переданных функции'),
  (31, 'Какая функция возвращает элемент из списка аргументов'),
  (32, 'Какая функция возвращает массив, содержащий аргументы функции'),
  (33, 'Какой функцией можно проверить существование другой функции'),
  (34, 'Какая функция разбивает строку с помощью разделителя'), (35, 'Какая функция объединяет массив в строку'),
  (36, 'Какая функция преобразует первый символ строки в нижний регистр'),
  (37, 'Какая функция преобразует первый символ строки в верхний регистр'),
  (38, 'Какая функция преобразует всю строку в нижний регистр'),
  (39, 'Какая функция преобразует всю строку в верхний регистр'),
  (40, 'Какая функция удаляет пробелы в конце строки'),
  (41, 'Какая функция удаляет пробелы или другие символы в начале и в конце строки'),
  (42, 'Какая из представленных функций заменяет все вхождения строки поиска на строку замены'),
  (43, 'Какая функция возвращает повторяющуюся строку'), (44, 'Какая из функций форматирует строку'),
  (45, 'Какая из функций возвращает подстроку'), (46, 'Какая функция разбивает строку на подстроки'),
  (47, 'Какая функция проверяет переменную на пустоту'),
  (48, 'Какая функция определяет была ли установлена переменная'), (49, 'Какая функция удаляет переменную'),
  (50, 'Какая функция возвращает PHP-тип переменной'), (51, 'Какая функция устанавливает PHP-тип переменной'),
  (52, 'Какая функция добавляет один или несколько элементов в конец массива'),
  (53, 'Какая функция добавляет один или несколько элементов в начало массива'),
  (54, 'Какая функция извлекает первый элемент массива'),
  (55, 'Какая функция извлекает последний элемент из массива'),
  (56, 'Какая функция извлекает значение из одного столбца в каждом входящем массиве'),
  (57, 'Какая из функций сортирует массив по ключам'), (58, 'Какая функция сортирует в обратном порядке'),
  (59, 'Какая функция сортирует массив по ключам в обратном порядке'), (60, 'Какая функция перемешивает массив'),
  (61, 'Какая функция возвращает случайное значение из массива'),
  (62, 'Какая функция округляет дробь в большую степень'), (63, 'Какая функция округляет дробь в меньшую степень'),
  (64, 'Какая функция округляет число типа float'),
  (65, 'Возвращает ассоциативный массив, содержащий информацию о дате/времени'),
  (66, 'Какая функция преобразует текстовое представление даты на английском языке в метку времени Unix'),
  (67, 'Какая из приведенных ниже функций возвращает массив с именами и значениями всех предопределенных констант'),
  (68, 'Данные каких переменных содержит в себе $_REQUEST'),
  (69, 'Какая функция задает определенный пользователем обработчик ошибок'),
  (70, 'Какая функция выводит стек вызовов функций в массив'),
  (71, 'Какой функцией осуществляется вызов пользовательских ошибок, предупреждений или уведомлений'),
  (72, 'Какое из обозначений ниже наиболее правильно характеризует cookies'),
  (73, 'Какой функцией устанавливаются куки'), (74, 'Какой функцией можно преобразовать массив в строку'),
  (75, 'Какой из типов PHP не поддается сериализации'), (76, 'Какой функцией можно преобразовать строку в массив'),
  (77, 'Какой функцией осуществляется отправка HTTP-заголовка'),
  (78, 'Какой функцией осуществляется включение буферизации вывода'), (79, 'Какое из определений сессии правильное:'),
  (80, 'Какой из режимов работы с фалами открывает доступ для чтения и записи и помещает указатель в конец файла'),
  (81, 'Какая из функций осуществляет бинарно-безопасную запись в файл'),
  (82, 'Какая из перечисленных устанавливает смещение в файле'),
  (83, 'Какая функция сбрасывает курсор у файлового указателя'), (84, 'Какая функция переименовывает файл'),
  (85, 'Какая функций возвращает массив, содержащий имена файлов и каталогов, расположенном по пути, переданном в качестве параметра'),
  (86, 'Какой метод в классе будет вызывается при каждом создании нового объекта'),
  (87, 'Какой из перечисленных модификаторов доступа не верный'),
  (88, 'Какой из представленных классов является базовым для всех исключений'),
  (89, 'Какие методы нельзя переопределить'),
  (90, 'Какая конструкция PHP используется при позднем статическом связывании'),
  (91, 'С помощью какого оператора можно проветить что $entity является эземпляром класса User?'),
  (92, 'Какой из магических методов вызывается при обращении к неопределенному свойству'),
  (93, 'Какой из магических методов вызывается когда неопределенному свойству присваивается значение'),
  (94, 'Какой из магических методов вызывается при обращении к неопределенному методу.'),
  (95, 'Какой из магических методов вызывается при обращении к неопределенному статическому методу?'),
  (96, 'Какой магический метод вызывается, когда скрипт пытается выполнить объект как функцию?'),
  (97, 'Какой метод вызывается для тех классов, которые экспортируются функцией var_export() ?'),
  (98, 'Какой магический метод используется при клонировании объекта'), (99, 'Trait это'),
  (100, 'Interface в PHP это'),
  (101, 'Какая конструкция языка в PHP используется для наследования одного класса от другого'),
  (102, 'Какая конструкция языка в PHP используется для реализации интерфейса классом'),
  (103, 'Какая функция используется для получения имени хоста по IP адресу'),
  (104, 'Какая функция используется для получения IP адреса (адресов) по имени хоста'),
  (115, 'Какая функция инициализирует сеанс cURL'), (116, 'Какая функция выполняет запрос cURL'),
  (117, 'Какая из перечисленных функций хеширования не существует в PHP'),
  (118, 'Какой магический метод вызывается при сериализации объекта?'),
  (119, 'Какие из приведенных ниже форматов комментариев в PHP являются правильными'),
  (120, 'Может ли один класс наследовать несколько классов в PHP?'),
  (121, 'Может ли класс реализовывать несколько интерфейсов в PHP?'),
  (122, 'Может ли интерфейс содержать реализацию методов?'), (123, 'Может ли интерфейс содержать константы?'),
  (124, 'Может ли интерфейс наследовать другой интерфейс?'),
  (125, 'Может ли интерфейс содержать абстрактные методы?'),
  (126, 'Может ли абстрактный класс наследовать обычный класс?'),
  (127, 'Может ли абстрактный класс наследовать другой абстрактный класс?'),
  (128, 'Может ли абстрактный класс содержать реализацию методов?'),
  (129, 'Может ли абстрактный класс содержать реализацию абстрактных методов?'),
  (130, 'Можно ли переопределять абстрактные методы, изменяя типы или набор параметров?'),
  (131, 'Может ли абстрактный класс реализовывать интерфейс?'), (132, 'Может ли трейт содержать константы?'),
  (133, 'Какая из формулировок ниже отвечает на вопрос: чем отличается метод доступа private от protected?'),
  (136, 'Может ли трейт содержать абстрактный класс'), (137, 'Может ли интерфейс содержать сущности'),
  (138, 'Может ли интерфейс содержать абстрактные методы'),
  (139, 'Может ли интерфейс содержать приватные и/или защищенные методы'),
  (140, 'Может ли интерфейс содержать приватные и/или защищенные сущности'),
  (141, 'Если класс содержит защищенные сущности, можно ли к ним обратится напрямую извне класса'),
  (142, 'Какой из вариантов выбрасывает исключение правильно'),
  (143, 'Какой из представленных ниже запросов добавит новую запись в таблицу users с полями id, username, email, где id - AUTO_INCREMENT'),
  (144, 'Что произойдет в результате следующего запроса: CREATE TABLE IF NOT EXISTS `users` (     `id` int(4) NOT NULL AUTO_INCREMENT,     `email` VARCHAR(100)         PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;'),
  (145, 'С помощью какой команды SQL можно отобразить структуру созданных таблиц?'),
  (146, 'Какая команда SQL создает базу данных `test`?'),
  (147, 'Какая команда SQL используется для выбора базы данных `test`?'),
  (148, 'Какая команда SQL позволяет изменять структуру таблицы (изменять, добавлять, удалять столбцы)'),
  (149, 'Какая команда SQL позволяет удалять базу данных?'),
  (150, 'Какая команда SQL предназначена для извлечения строк данных из одной или нескольких таблиц'),
  (151, 'Какая команда SQL обновляет столбцы таблиц в соответствии с их новыми значениями'),
  (152, 'Какая команда SQL используется для получения списка баз данных и таблиц в выбранной базе данных'),
  (153, 'Какая команда SQL используется для внешнего присоединения таблицы слева (слабая связка)'),
  (154, 'Какая команда SQL используется для внутреннего присоединения таблицы слева (жесткая связка)'),
  (155, 'Какая оператор SQL аналогичен оператору WHERE за исключением того, что строки отбираются не по значениям столбцов, а строятся из значений столбцов, указанных в GROUP BY'),
  (156, 'Какая PHP функция устанавливает соединение с сервером MySQL?'),
  (157, 'Какая PHP функция закрывает соединение с сервером MySQL?'),
  (158, 'Какая PHP функция применяется для отправки серверу SQL-запросов?'),
  (159, 'Какая PHP функция возвращает значения полей в виде ассоциативного массива?'),
  (160, 'Какая PHP функция возвращает значения полей в виде объекта?'),
  (161, 'Поддерживается ли в PHP множественное наследование?'),
  (162, 'Поддерживается ли в трейтах множественное наследование?'), (163, 'Можно ли наследовать несколько трейтов?'),
  (164, 'По какому признаку сервер идентифицирует сессию пользователя?'), (165, 'Где хранятся данные сессии?'),
  (166, 'Где хранятся COOKIE?'),
  (167, 'Нужно ли вызывать функцию session_start если нам необходимо обратится к данным сессии пользователя?'),
  (168, 'Для чего в PHP используется символ :: (два двоеточия)?'),
  (169, 'Какой уровень доступа носят константы в классах?'), (170, 'Как отправляются COOKIE на сервер?'),
  (171, 'Что хранит $_REQUEST?'), (172, 'Что хранит массив $_FILES?');

--
-- Table structure for table `questions_answers`
--
DROP TABLE IF EXISTS `questions_answers`;
CREATE TABLE `questions_answers` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `question_id` int(10) NOT NULL,
  `answer_id` int(10) NOT NULL,
  `is_correct` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `FK_qa_question` (`question_id`),
  KEY `FK_qa_answer` (`answer_id`),
  CONSTRAINT `FK_qa_answer` FOREIGN KEY (`answer_id`) REFERENCES `answers` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_qa_question` FOREIGN KEY (`question_id`) REFERENCES `questions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `questions_answers`
--
INSERT INTO `questions_answers` (`id`, `question_id`, `answer_id`, `is_correct`) VALUES
  (1, 1, 1, 1), (2, 1, 2, 0), (3, 1, 3, 0), (4, 1, 4, 0), (5, 2, 5, 1), (6, 2, 6, 0), (7, 2, 7, 0), (8, 2, 8, 0),
  (9, 3, 9, 0), (10, 3, 10, 0), (11, 3, 11, 0), (12, 3, 12, 1), (13, 4, 13, 0), (14, 4, 14, 0), (15, 4, 15, 0),
  (16, 4, 16, 1), (17, 5, 17, 0), (18, 5, 18, 0), (19, 5, 19, 1), (20, 5, 20, 0), (21, 6, 21, 0), (22, 6, 22, 0),
  (23, 6, 23, 1), (24, 6, 24, 0), (25, 7, 25, 0), (26, 7, 26, 0), (27, 7, 27, 1), (28, 7, 28, 0), (29, 8, 29, 0),
  (30, 8, 30, 0), (31, 8, 31, 1), (32, 8, 32, 0), (33, 9, 33, 0), (34, 9, 34, 1), (35, 9, 35, 0), (36, 9, 36, 0),
  (37, 10, 37, 1), (38, 10, 38, 0), (39, 10, 39, 0), (40, 10, 40, 0), (41, 11, 41, 1), (42, 11, 42, 0),
  (43, 11, 43, 0), (44, 11, 44, 0), (45, 12, 45, 1), (46, 12, 46, 0), (47, 12, 47, 0), (48, 12, 48, 0),
  (49, 13, 49, 1), (50, 13, 50, 0), (51, 13, 51, 0), (52, 13, 52, 0), (53, 14, 53, 0), (54, 14, 54, 1),
  (55, 14, 55, 0), (56, 14, 56, 0), (57, 15, 57, 0), (58, 15, 58, 0), (59, 15, 59, 1), (60, 15, 60, 0),
  (61, 16, 61, 0), (62, 16, 62, 0), (63, 16, 63, 1), (64, 16, 64, 0), (65, 17, 65, 1), (66, 17, 66, 0),
  (67, 17, 67, 0), (68, 17, 68, 0), (69, 18, 69, 1), (70, 18, 70, 0), (71, 18, 71, 0), (72, 18, 72, 0),
  (73, 19, 73, 0), (74, 19, 74, 1), (75, 19, 75, 0), (76, 19, 76, 0), (77, 20, 77, 0), (78, 20, 78, 0),
  (79, 20, 79, 0), (80, 20, 80, 1), (81, 21, 81, 0), (82, 21, 82, 0), (83, 21, 83, 1), (84, 21, 84, 0),
  (85, 22, 85, 0), (86, 22, 86, 0), (87, 22, 87, 0), (88, 22, 88, 1), (89, 23, 89, 0), (90, 23, 90, 1),
  (91, 23, 91, 0), (92, 23, 92, 0), (93, 24, 93, 0), (94, 24, 94, 1), (95, 24, 95, 0), (96, 24, 96, 0),
  (97, 25, 97, 0), (98, 25, 98, 0), (99, 25, 99, 0), (100, 25, 100, 1), (101, 26, 101, 0), (102, 26, 102, 1),
  (103, 26, 103, 0), (104, 26, 104, 0), (105, 27, 105, 0), (106, 27, 106, 0), (107, 27, 107, 1), (108, 27, 108, 0),
  (109, 28, 109, 0), (110, 28, 110, 0), (111, 28, 111, 1), (112, 28, 112, 0), (113, 29, 113, 0), (114, 29, 114, 0),
  (115, 29, 115, 0), (116, 29, 116, 1), (117, 30, 117, 1), (118, 30, 118, 0), (119, 30, 119, 0), (120, 30, 120, 0),
  (121, 31, 121, 1), (122, 31, 122, 0), (123, 31, 123, 0), (124, 31, 124, 0), (125, 32, 125, 0), (126, 32, 126, 1),
  (127, 32, 127, 0), (128, 32, 128, 0), (129, 33, 129, 1), (130, 33, 130, 0), (131, 33, 131, 0), (132, 33, 132, 0),
  (133, 34, 133, 1), (134, 34, 134, 0), (135, 34, 135, 0), (136, 34, 136, 0), (137, 35, 137, 0), (138, 35, 138, 1),
  (139, 35, 139, 1), (140, 35, 140, 0), (141, 36, 141, 0), (142, 36, 142, 0), (143, 36, 143, 1), (144, 36, 144, 0),
  (145, 37, 145, 1), (146, 37, 146, 0), (147, 37, 147, 0), (148, 37, 148, 0), (149, 38, 149, 0), (150, 38, 150, 1),
  (151, 38, 151, 0), (152, 38, 152, 0), (153, 39, 153, 1), (154, 39, 154, 0), (155, 39, 155, 0), (156, 39, 156, 0),
  (157, 40, 157, 0), (158, 40, 158, 0), (159, 40, 159, 0), (160, 40, 160, 1), (161, 41, 161, 0), (162, 41, 162, 1),
  (163, 41, 163, 0), (164, 41, 164, 0), (165, 42, 165, 0), (166, 42, 166, 0), (167, 42, 167, 1), (168, 42, 168, 0),
  (169, 43, 169, 0), (170, 43, 170, 1), (171, 43, 171, 0), (172, 43, 172, 0), (173, 44, 173, 0), (174, 44, 174, 0),
  (175, 44, 175, 1), (176, 44, 176, 0), (177, 45, 177, 1), (178, 45, 178, 1), (179, 45, 179, 1), (180, 45, 180, 1),
  (181, 46, 181, 0), (182, 46, 182, 1), (183, 46, 183, 0), (184, 46, 184, 1), (185, 47, 185, 1), (186, 47, 186, 0),
  (187, 47, 187, 0), (188, 47, 188, 0), (189, 48, 189, 0), (190, 48, 190, 1), (191, 48, 191, 0), (192, 48, 192, 0),
  (193, 49, 193, 0), (194, 49, 194, 0), (195, 49, 195, 1), (196, 49, 196, 0), (197, 50, 197, 1), (198, 50, 198, 0),
  (199, 50, 199, 0), (200, 50, 200, 0), (201, 51, 201, 0), (202, 51, 202, 1), (203, 51, 203, 0), (204, 51, 204, 0),
  (205, 52, 205, 1), (206, 52, 206, 0), (207, 52, 207, 0), (208, 52, 208, 0), (209, 53, 209, 0), (210, 53, 210, 1),
  (211, 53, 211, 0), (212, 53, 212, 0), (213, 54, 213, 0), (214, 54, 214, 0), (215, 54, 215, 1), (216, 54, 216, 0),
  (217, 55, 217, 0), (218, 55, 218, 0), (219, 55, 219, 0), (220, 55, 220, 1), (221, 56, 221, 0), (222, 56, 222, 0),
  (223, 56, 223, 1), (224, 56, 224, 0), (225, 57, 225, 0), (226, 57, 226, 1), (227, 57, 227, 1), (228, 57, 228, 1),
  (229, 58, 229, 1), (230, 58, 230, 0), (231, 58, 231, 1), (232, 58, 232, 1), (233, 59, 233, 0), (234, 59, 234, 1),
  (235, 59, 235, 0), (236, 59, 236, 0), (237, 60, 237, 1), (238, 60, 238, 0), (239, 60, 239, 0), (240, 60, 240, 0),
  (241, 61, 241, 0), (242, 61, 242, 0), (243, 61, 243, 1), (244, 61, 244, 0), (245, 62, 245, 1), (246, 62, 246, 0),
  (247, 62, 247, 0), (248, 62, 248, 0), (249, 63, 249, 1), (250, 63, 250, 0), (251, 63, 251, 0), (252, 63, 252, 0),
  (253, 64, 253, 0), (254, 64, 254, 1), (255, 64, 255, 0), (256, 64, 256, 0), (257, 65, 257, 1), (258, 65, 258, 0),
  (259, 65, 259, 0), (260, 65, 260, 0), (261, 66, 261, 0), (262, 66, 262, 0), (263, 66, 263, 1), (264, 66, 264, 0),
  (265, 67, 265, 1), (266, 67, 266, 0), (267, 67, 267, 0), (268, 67, 268, 0), (269, 68, 269, 1), (270, 68, 270, 1),
  (271, 68, 271, 1), (272, 68, 272, 0), (273, 69, 273, 0), (274, 69, 274, 0), (275, 69, 275, 1), (276, 69, 276, 0),
  (277, 70, 277, 1), (278, 70, 278, 0), (279, 70, 279, 0), (280, 70, 280, 0), (281, 71, 281, 1), (282, 71, 282, 0),
  (283, 71, 283, 0), (284, 71, 284, 0), (285, 72, 285, 1), (286, 72, 286, 0), (287, 72, 287, 0), (288, 72, 288, 0),
  (289, 73, 289, 1), (290, 73, 290, 0), (291, 73, 291, 0), (292, 73, 292, 0), (293, 74, 293, 0), (294, 74, 294, 0),
  (295, 74, 295, 1), (296, 74, 296, 0), (297, 75, 297, 0), (298, 75, 298, 0), (299, 75, 299, 0), (300, 75, 300, 1),
  (301, 76, 301, 0), (302, 76, 302, 1), (303, 76, 303, 0), (304, 76, 304, 1), (305, 77, 305, 0), (306, 77, 306, 0),
  (307, 77, 307, 1), (308, 77, 308, 0), (309, 78, 309, 1), (310, 78, 310, 0), (311, 78, 311, 0), (312, 78, 312, 0),
  (313, 79, 313, 0), (314, 79, 314, 1), (315, 79, 315, 0), (316, 79, 316, 0), (317, 80, 317, 1), (318, 80, 318, 0),
  (319, 80, 319, 0), (320, 80, 320, 0), (321, 81, 321, 0), (322, 81, 322, 1), (323, 81, 323, 1), (324, 81, 324, 0),
  (325, 82, 325, 0), (326, 82, 326, 1), (327, 82, 327, 0), (328, 82, 328, 0), (329, 83, 329, 0), (330, 83, 330, 1),
  (331, 83, 331, 0), (332, 83, 332, 0), (333, 84, 333, 0), (334, 84, 334, 1), (335, 84, 335, 0), (336, 84, 336, 0),
  (337, 85, 337, 1), (338, 85, 338, 0), (339, 85, 339, 0), (340, 85, 340, 0), (341, 86, 341, 1), (342, 86, 342, 0),
  (343, 86, 343, 0), (344, 86, 344, 0), (345, 87, 345, 0), (346, 87, 346, 0), (347, 87, 347, 0), (348, 87, 348, 1),
  (349, 88, 349, 0), (350, 88, 350, 0), (351, 88, 351, 1), (352, 88, 352, 0), (353, 89, 353, 0), (354, 89, 354, 0),
  (355, 89, 355, 1), (356, 89, 356, 0), (357, 90, 357, 1), (358, 90, 358, 0), (359, 90, 359, 0), (360, 90, 360, 0),
  (361, 91, 361, 0), (362, 91, 362, 0), (363, 91, 363, 1), (364, 91, 364, 0), (365, 92, 365, 1), (366, 92, 366, 0),
  (367, 92, 367, 0), (368, 92, 368, 0), (369, 93, 369, 0), (370, 93, 370, 1), (371, 93, 371, 0), (372, 93, 372, 0),
  (373, 94, 373, 0), (374, 94, 374, 0), (375, 94, 375, 1), (376, 94, 376, 0), (377, 95, 377, 0), (378, 95, 378, 0),
  (379, 95, 379, 0), (380, 95, 380, 1), (381, 96, 381, 0), (382, 96, 382, 1), (383, 96, 383, 0), (384, 96, 384, 0),
  (385, 97, 385, 1), (386, 97, 386, 0), (387, 97, 387, 0), (388, 97, 388, 0), (389, 98, 389, 1), (390, 98, 390, 0),
  (391, 98, 391, 0), (392, 98, 392, 0), (393, 99, 393, 1), (394, 99, 394, 0), (395, 99, 395, 0), (396, 99, 396, 0),
  (397, 100, 397, 0), (398, 100, 398, 0), (399, 100, 399, 1), (400, 100, 400, 0), (401, 101, 401, 0),
  (402, 101, 402, 0), (403, 101, 403, 1), (404, 101, 404, 0), (405, 102, 405, 1), (406, 102, 406, 0),
  (407, 102, 407, 0), (408, 102, 408, 0), (409, 103, 409, 1), (410, 103, 410, 0), (411, 103, 411, 0),
  (412, 103, 412, 0), (413, 104, 413, 0), (414, 104, 414, 0), (415, 104, 415, 1), (416, 104, 416, 0),
  (457, 115, 457, 0), (458, 115, 458, 1), (459, 115, 459, 0), (460, 115, 460, 0), (461, 116, 461, 1),
  (462, 116, 462, 0), (463, 116, 463, 0), (464, 116, 464, 0), (465, 117, 465, 0), (466, 117, 466, 0),
  (467, 117, 467, 0), (468, 117, 468, 0), (469, 117, 469, 1), (470, 118, 470, 0), (471, 118, 471, 1),
  (472, 118, 472, 0), (473, 118, 473, 0), (474, 118, 474, 0), (475, 118, 475, 0), (476, 118, 476, 0),
  (477, 118, 477, 0), (478, 119, 478, 1), (479, 119, 479, 0), (480, 119, 480, 0), (481, 119, 481, 0),
  (482, 119, 482, 0), (483, 119, 483, 1), (484, 120, 484, 0), (485, 120, 485, 1), (486, 121, 486, 1),
  (487, 121, 487, 0), (488, 122, 488, 0), (489, 122, 489, 1), (490, 123, 490, 1), (491, 123, 491, 0),
  (492, 124, 492, 1), (493, 124, 493, 0), (494, 125, 494, 0), (495, 125, 495, 1), (496, 126, 496, 1),
  (497, 126, 497, 0), (498, 127, 498, 1), (499, 127, 499, 0), (500, 128, 500, 1), (501, 128, 501, 0),
  (502, 129, 502, 0), (503, 129, 503, 1), (504, 130, 504, 0), (505, 130, 505, 1), (506, 131, 506, 1),
  (507, 131, 507, 0), (508, 132, 508, 0), (509, 132, 509, 1), (510, 133, 510, 0), (511, 133, 511, 0),
  (512, 133, 512, 0), (513, 133, 513, 0), (514, 133, 514, 1), (525, 136, 525, 1), (526, 136, 526, 0),
  (529, 137, 529, 0), (530, 137, 530, 1), (533, 138, 533, 0), (534, 138, 534, 1), (537, 139, 537, 0),
  (538, 139, 538, 1), (541, 140, 541, 0), (542, 140, 542, 1), (545, 141, 545, 0), (546, 141, 546, 1),
  (547, 142, 547, 1), (548, 142, 548, 0), (549, 142, 549, 0), (550, 143, 550, 0), (551, 143, 551, 0),
  (552, 143, 552, 1), (553, 144, 553, 0), (554, 144, 554, 1), (555, 145, 555, 1), (556, 145, 556, 0),
  (557, 145, 557, 0), (558, 145, 558, 0), (559, 146, 559, 0), (560, 146, 560, 1), (561, 146, 561, 0),
  (562, 146, 562, 0), (563, 147, 563, 0), (564, 147, 564, 0), (565, 147, 565, 1), (566, 147, 566, 0),
  (567, 148, 567, 0), (568, 148, 568, 0), (569, 148, 569, 1), (570, 148, 570, 0), (571, 149, 571, 0),
  (572, 149, 572, 1), (573, 149, 573, 0), (574, 149, 574, 0), (575, 150, 575, 0), (576, 150, 576, 0),
  (577, 150, 577, 1), (578, 150, 578, 0), (579, 151, 579, 1), (580, 151, 580, 0), (581, 151, 581, 0),
  (582, 151, 582, 0), (583, 152, 583, 0), (584, 152, 584, 1), (585, 152, 585, 0), (586, 152, 586, 0),
  (587, 153, 587, 0), (588, 153, 588, 1), (589, 153, 589, 0), (590, 153, 590, 0), (591, 154, 591, 1),
  (592, 154, 592, 0), (593, 154, 593, 0), (594, 154, 594, 0), (595, 155, 595, 0), (596, 155, 596, 0),
  (597, 155, 597, 1), (598, 155, 598, 0), (599, 156, 599, 1), (600, 156, 600, 0), (601, 156, 601, 0),
  (602, 156, 602, 0), (603, 157, 603, 0), (604, 157, 604, 0), (605, 157, 605, 1), (606, 157, 606, 0),
  (607, 158, 607, 1), (608, 158, 608, 0), (609, 158, 609, 0), (610, 158, 610, 0), (611, 159, 611, 0),
  (612, 159, 612, 0), (613, 159, 613, 1), (614, 159, 614, 0), (615, 160, 615, 0), (616, 160, 616, 1),
  (617, 160, 617, 0), (618, 160, 618, 0), (619, 161, 619, 0), (620, 161, 620, 1), (621, 162, 621, 1),
  (622, 162, 622, 0), (623, 163, 623, 1), (624, 163, 624, 0), (625, 164, 625, 1), (626, 164, 626, 0),
  (627, 164, 627, 0), (628, 165, 628, 1), (629, 165, 629, 0), (630, 166, 630, 0), (631, 166, 631, 1),
  (632, 167, 632, 0), (633, 167, 633, 1), (634, 167, 634, 0), (635, 168, 635, 0), (636, 168, 636, 0),
  (637, 168, 637, 1), (638, 168, 638, 0), (639, 169, 639, 1), (640, 169, 640, 0), (641, 169, 641, 0),
  (642, 169, 642, 0), (643, 170, 643, 1), (644, 170, 644, 0), (645, 170, 645, 0), (646, 170, 646, 0),
  (647, 171, 647, 0), (648, 171, 648, 0), (649, 171, 649, 0), (650, 171, 650, 1), (651, 172, 651, 0),
  (652, 172, 652, 0), (653, 172, 653, 1), (654, 172, 654, 0);

--
-- Table structure for table `users`
--
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` int(4) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `email` varchar(50) NOT NULL,
  `password` varchar(50) NOT NULL,
  `created_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
